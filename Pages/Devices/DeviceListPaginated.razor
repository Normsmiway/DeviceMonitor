@inject INotifier service
@implements IDisposable

<link href="https://stackpath.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet">
<style>
    .sort-th {
        cursor: pointer;
    }

    .fa {
        float: right;
    }

    .btn-custom {
        color: black;
        float: left;
        padding: 8px 16px;
        text-decoration: none;
        transition: background-color .3s;
        border: 2px solid #000;
        margin: 0px 5px 0px 5px;
    }
</style>

@if (Devices is null)
{
    <p><em>Loading...</em></p>
}



<SpinLoader IsLoading="isLoading">
    <LoadingTemplate>

        <CircleFade Center="true" Color="#5b43c7" Size="3em" />

    </LoadingTemplate>

    <ContentTemplate>
        <DeviceCounter Devices="@Devices" />
        @foreach (var device in Devices)
        {
            <Device Model="device"></Device>
        }
    <div class="row">
        <div class="pagination">
            <button class="btn btn-custom" @onclick=@(async ()=>await NavigateToPage("previous"))>Prev</button>
            @for (int i = startPage; i <= endPage; i++)
            {
                var currentPage = i;
                <button class="btn btn-custom pagebutton @(currentPage==curPage?"btn-danger":"")" @onclick=@(async () =>await refreshRecords(currentPage))>
                    @currentPage
                </button>
            }
            <button class="btn btn-custom" @onclick=@(async ()=>await NavigateToPage("next"))>Next</button>
        </div>
    </div>
       
    </ContentTemplate>
</SpinLoader>



@code {
    List<DeviceModel>
    Devices;
    private bool isLoading = true;

    #region Pagination
    int totalPages;
    int totalRecords;
    int curPage;
    int pagerSize;
    int pageSize;
    int startPage;
    int endPage;
    string sortColumnName = "status";
    string sortDir = "ASC";
    #endregion
    protected override async Task OnInitializedAsync()
    {
        //display total page buttons
        pagerSize = 3;
        pageSize = 4;
        curPage = 1;

        this.service.OnDeviceStatusChanged += this.DeviceStatusChanged;
        var result = await this.service.GetDevices((curPage - 1) * pageSize, pageSize, sortColumnName, sortDir);
        totalRecords = await service.GetTotalCount();
        totalPages = (int)Math.Ceiling(totalRecords / (decimal)pageSize);
        SetPagerSize("forward");
        OrderDevice(result);

    }
    private async void DeviceStatusChanged(object sender, DeviceChangeEventArgs args)
    {

        var deviceToUpdate = this.Devices.FirstOrDefault(d => d.Id == args.NewDevice.Id);
        if (deviceToUpdate == null)
        {
            this.Devices.Add(args.NewDevice);
        }
        else
        {
            deviceToUpdate.Update(args.NewDevice);
        }
        OrderDevice(Devices);
        await InvokeAsync(() => { base.StateHasChanged(); });
    }

    public void Dispose()
    {
        this.service.OnDeviceStatusChanged += this.DeviceStatusChanged;
    }
    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            isLoading = false;
            StateHasChanged();
        }
        base.OnAfterRender(firstRender);
    }
    private void OrderDevice(List<DeviceModel> devices)
    {
        this.Devices = devices.OrderBy(d => d.Status)
        .ThenBy(d => d.CashJam).ThenBy(c => c.CashLevel).ToList();
    }

    public void SetPagerSize(string direction)
    {
        if (direction == "forward" && endPage < totalPages)
        {
            startPage = endPage + 1;
            if (endPage + pagerSize < totalPages)
            {
                endPage = startPage + pagerSize - 1;
            }
            else
            {
                endPage = totalPages;
            }
            this.StateHasChanged();
        }
        else if (direction == "back" && startPage > 1)
        {
            endPage = startPage - 1;
            startPage = startPage - pagerSize;
        }
    }
    public async Task refreshRecords(int currentPage)
    {
        Devices = await service.GetDevices((currentPage - 1) * pageSize, pageSize, sortColumnName, sortDir);
        OrderDevice(Devices);
        curPage = currentPage;
        this.StateHasChanged();
    }

    public async Task NavigateToPage(string direction)
    {
        if (direction == "next")
        {
            if (curPage < totalPages)
            {
                if (curPage == endPage)
                {
                    SetPagerSize("forward");
                }
                curPage += 1;
            }
        }
        else if (direction == "previous")
        {
            if (curPage > 1)
            {
                if (curPage == startPage)
                {
                    SetPagerSize("back");
                }
                curPage -= 1;
            }
        }
        await refreshRecords(curPage);
    }
}

